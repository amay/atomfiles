# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.source.js':
  'Mocha Describe':
    'prefix': 'des'
    'body': 'describe(\'$1\', () => {\n  $2\n});'
  'Mocha Context':
    'prefix': 'con'
    'body': 'context(\'$1\', () => {\n  $2\n});'
  'Mocha It':
    'prefix': 'it'
    'body': 'it(\'$1\', () => {\n  $2\n});'
  'Mocha beforeEach':
    'prefix': 'bef'
    'body': 'beforeEach((${1:done}) => {\n  $2\n});'
  'Mocha afterEach':
    'prefix': 'aft'
    'body': 'afterEach((${1:done}) => {\n  $2\n});'
  'React Component: POC':
    'prefix': 'rcom'
    'body': """
    const React = require(\'react\');
    const { Component, PropTypes } = React;

    class $1 extends Component {
      static displayName = '$1';

      static propTypes = {
        $2
      };

      render() {
        return null;
      }
    }

    module.exports = $1;
    """
  'React Component Spec: POC':
    'prefix': 'rcoms'
    'body': """
    const React = require(\'react\');

    const $1 = require(\'app/components/$2\');

    describe(\'$1\', () => {
      function render(props = {}) {
        return shallowRender(<$1 {...props} />);
      }

      it('renders', () => {
        expect(render()).to.not.be.undefined;
      });
    });
    """

#
# Unity / C-Sharp snippets
#
'.source.cs':
  'MonoBehaviour' :
    'prefix': 'mono'
    'body': """
    using UnityEngine;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public class $1 : MonoBehaviour {
      $2
    }
    """
